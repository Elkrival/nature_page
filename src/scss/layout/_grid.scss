/*
We need to define a width for a row, using an 1140px width  we need to set this rems.

max-width: If there's available space to supply the correct width specified by Rem it will do it, otherwise if the viewport does not have the available width it will instead fill 100% of the viewport width

To center an element inside a block element we use the margin: 0 auto trick

Our rows should have space for our layout Naturally we need some space
because this value like max width and margin bottom are candidates to be variables.

As the project progresses we will be using these variables over and over again

The last child we cannot have a margin at the bottom for layout specificiations

.not() we need to use this to specify a pseudo class such as last child or the last row element we select everything except the last child. Therefore styles such as margin-bottom will work on everything EXCEPT the last child.

----------Columns---------
Because our columns are inside our rows we can nest the columns inside our row selector

We have to make an equation for the columns
for example our first row we have two columns with a gutter in the middle.

We take the entire width of the row then we subtract the gutter, then that value gets divided by 2

max-width - gutter / 2 for the width of one column

------- calc() --------

This function allows us to make calculations where we can mix units. Css and Sass all have the ability to make calculations but they are specific to the units we cannot mix them.

The importance of using calc() in the layout is the ability of doing these calculations before the page is rendered it is only then when css and the browser knows what the correct measurements are.

We must use order of operations for our calculations

special note:

To use a variable with the calc() function we must interpolate it by using #{ variable }

In order to not have gutters with addtional widths we must reset the margin of the last child

When an item is floated it loses it's height this is where we implement ClearFix

Because our columns will be different yet similar whatever pieces of code that we can reuse and not retype is ideal.

We will use our attributes property to apply the
&:not(:last-child){
 margin-right: $gutter-horizontal
}
to all columns

To use attributes we apply the [] inside the brackets we can alter the attributes that we want such as src for images href for anchors or like we are using it now it's for classes. Inside the brackets we can use other symbos such as ^ which means it will match the beginning that we specify.

What this will do is select all of the elements that start with the col- class name, this is how we select all of the items at the same time.

* means to select all of the classes that match col-

When we set up our attributes inside our brackets we use clojures to then speicify the styles that should match the attribute we have selected.

*/
.row{
 max-width: $grid-width;
 margin: 0 auto;
 &:not(:last-child){
  margin-bottom: $gutter-vertical;
 }

 @include clearFix;

 [class^="col-"]{
  float:left;
  &:not(:last-child){
   margin-right: $gutter-horizontal
  }
 }

 .col-1-of-2{
  width: calc((100% - #{ $gutter-horizontal }) / 2);
 }
 .col-1-of-3{
  width:calc((100% - 2/* 100% is the width of the row, 2 is the number of gutters, gutter horizontal is the size of the gutter and the 3 is the number of columns we have on that row*/ * #{$gutter-horizontal }) / 3)
 }
 // tough measurements for this colum n of 2 0f 3 we will need to add 2 of the of the 1 of 3 columns + the gutter width. Therefore it looks like this 2 * ( (100% - 2 * #{ $gutter-horizontal }) / 3 ) + #{ $gutter-horizontal }
 .col-2-of-3{
  width: calc( 2 * ((100% - 2 * #{ $gutter-horizontal }) / 3) + #{ $gutter-horizontal });
 }
 .col-1-of-4{
   width:calc((100% - 3 * #{$gutter-horizontal }) / 4)
 }
 .col-2-of-4{
  width: calc( 2 * (( 100% - 3 * #{ $gutter-horizontal }) / 4 ) + #{ $gutter-horizontal })
 }
 .col-3-of-4{
  width: calc(3 * (( 100% - 3 * #{ $gutter-horizontal }) / 4) + (2 * #{ $gutter-horizontal }))
 }
}
